matplot(t(FieldGoals), type = "a" ,pch = 15:18 ,col = c(1:4,6))
matplot(t(FieldGoals), type = "c" ,pch = 15:18 ,col = c(1:4,6))
matplot(t(FieldGoals), type = "d" ,pch = 15:18 ,col = c(1:4,6))
matplot(t(FieldGoals), type = "b" ,pch = 15:18 ,col = c(1:4,6))
matplot(t(FieldGoals), type = "b" ,pch = 15:18 ,col = c(1:4,6))
legend("bottomleft",inset = 0.01 , legend = Players ,pch = 15:18 ,col = c(1:4,6),horiz = F)
t(FieldGoals / Games)
matplot(t(FieldGoals/Games), type = "b" ,pch = 15:18 ,col = c(1:4,6))
legend("bottomleft",inset = 0.01 , legend = Players ,pch = 15:18 ,col = c(1:4,6),horiz = F)
matplot(t(FieldGoals/FieldGoalAttempts), type = "b" ,pch = 15:18 ,col = c(1:4,6))
legend("bottomleft",inset = 0.01 , legend = Players ,pch = 15:18 ,col = c(1:4,6),horiz = F)
x <- c("a","b","c","d","e")
x
x[c(1,5)]
x[c(1:5)]
x[1]
Games
Games
Games[1:4 , 4:10]
Games[1:4 , 5:10]
Games[1:4,]
Games[c(1:4),]
Games[,c(1:4)]
source('~/.active-rstudio-document', echo=TRUE)
Games[,c("2005","2008")]
Games[1 , ]
Games[1 , 5]
is.matrix(Games[1 , ])
is.vector(Games[1 , ])
is.matrix(Games[1 , 1])
is.vector(Games[1 , 1])
Games[1 , drop=F]
Games[1 : 5 ,drop=F]
Games[c(1 : 5) ,drop=F]
is.vector(Games[1 , drop = F])
is.matrix(Games[1 , drop=F])
Games[1 ,, drop=F]
is.matrix(Games[1 ,, drop=F])
Games[1 , 5 ,drop=F]
is.vector(Games[1 , drop = F])
is.matrix(Games[1 , 5 ,drop=F])
matplot(t(MinutesPlayed), type = "b" ,pch = 15:18 ,col = c(1:4,6))
legend("bottomleft",inset = 0.01 , legend = Players ,pch = 15:18 ,col = c(1:4,6),horiz = F)
Data <min
Data
Data <- MinutesPlayed[1:3,]
Data
(t(Data)
t(Data)
t(Data)
matplot(t(Data), type = "b" ,pch = 15:18 ,col = c(1:4,6))
legend("bottomleft",inset = 0.01 , legend = Players[1:3] ,pch = 15:18 ,col = c(1:4,6),horiz = F)
Data <- MinutesPlayed[1,]
matplot(t(Data), type = "b" ,pch = 15:18 ,col = c(1:4,6))
legend("bottomleft",inset = 0.01 , legend = Players[1] ,pch = 15:18 ,col = c(1:4,6),horiz = F)
Data
Data <- MinutesPlayed[1,drop = F]
matplot(t(Data), type = "b" ,pch = 15:18 ,col = c(1:4,6))
legend("bottomleft",inset = 0.01 , legend = Players[1] ,pch = 15:18 ,col = c(1:4,6),horiz = F)
Data <- MinutesPlayed[1,,drop = F]
Data <- MinutesPlayed[1,,drop = F]
matplot(t(Data), type = "b" ,pch = 15:18 ,col = c(1:4,6))
legend("bottomleft",inset = 0.01 , legend = Players[1] ,pch = 15:18 ,col = c(1:4,6),horiz = F)
myplot <- function()
{
Data <- MinutesPlayed[1,,drop = F]
matplot(t(Data), type = "b" ,pch = 15:18 ,col = c(1:4,6))
legend("bottomleft",inset = 0.01 , legend = Players[1] ,pch = 15:18 ,col = c(1:4,6),horiz = F)
}
myplot()
myplot()
Data
myplot()
Data <- MinutesPlayed[1:3,]
matplot(t(Data), type = "b" ,pch = 15:18 ,col = c(1:4,6))
legend("bottomleft",inset = 0.01 , legend = Players[1:3] ,pch = 15:18 ,col = c(1:4,6),horiz = F)Data <- MinutesPlayed[1:3,]
Data <- MinutesPlayed[1:3,]
matplot(t(Data), type = "b" ,pch = 15:18 ,col = c(1:4,6))
legend("bottomleft",inset = 0.01 , legend = Players[1:3] ,pch = 15:18 ,col = c(1:4,6),horiz = F)Data <- MinutesPlayed[1:3,]
myplot()
myplot <- function()
{
Data <- MinutesPlayed[2,,drop = F]
matplot(t(Data), type = "b" ,pch = 15:18 ,col = c(1:4,6))
legend("bottomleft",inset = 0.01 , legend = Players[2] ,pch = 15:18 ,col = c(1:4,6),horiz = F)
}
myplot()
myplot <- function()
{
Data <- MinutesPlayed[2:3,,drop = F]
matplot(t(Data), type = "b" ,pch = 15:18 ,col = c(1:4,6))
legend("bottomleft",inset = 0.01 , legend = Players[2:3] ,pch = 15:18 ,col = c(1:4,6),horiz = F)
}
myplot()
myplot(1:5)
#parameter
myplot <- function(rows)
{
Data <- MinutesPlayed[rows,,drop = F]
matplot(t(Data), type = "b" ,pch = 15:18 ,col = c(1:4,6))
legend("bottomleft",inset = 0.01 , legend = Players[rows] ,pch = 15:18 ,col = c(1:4,6),horiz = F)
}
myplot(1:5)
myplot <- function(rows)
{
Data <- Games[rows,,drop = F]
matplot(t(Data), type = "b" ,pch = 15:18 ,col = c(1:4,6))
legend("bottomleft",inset = 0.01 , legend = Players[rows] ,pch = 15:18 ,col = c(1:4,6),horiz = F)
}
myplot(1:5)
#parameter
myplot <- function(rows)
{
Data <- Points[rows,,drop = F]
matplot(t(Data), type = "b" ,pch = 15:18 ,col = c(1:4,6))
legend("bottomleft",inset = 0.01 , legend = Players[rows] ,pch = 15:18 ,col = c(1:4,6),horiz = F)
}
myplot(1:5)
myplot <- function(data , rows)
{
Data <- Points[rows,,drop = F]
matplot(t(Data), type = "b" ,pch = 15:18 ,col = c(1:4,6))
legend("bottomleft",inset = 0.01 , legend = Players[rows] ,pch = 15:18 ,col = c(1:4,6),horiz = F)
}
myplot(Salary , 1:5)
myplot <- function(data , rows)
{
Data <- data[rows,,drop = F]
matplot(t(Data), type = "b" ,pch = 15:18 ,col = c(1:4,6))
legend("bottomleft",inset = 0.01 , legend = Players[rows] ,pch = 15:18 ,col = c(1:4,6),horiz = F)
}
myplot(Salary , 1:5)
myplot <- function(data , rows =1:10)
{
Data <- data[rows,,drop = F]
matplot(t(Data), type = "b" ,pch = 15:18 ,col = c(1:4,6))
legend("bottomleft",inset = 0.01 , legend = Players[rows] ,pch = 15:18 ,col = c(1:4,6),horiz = F)
}
myplot(Salary)  #now any matrix
myplot <- function(data , rows =1:10)
{
Data <- data[rows,,drop = F]
matplot(t(Data), type = "b" ,pch = 15:18 ,col = c(1:4,6))
legend("bottomleft",inset = 0.01 , legend = Players[rows] ,pch = 15:18 ,col = c(1:4,6),horiz = F)
}
myplot(Games)  #now any matrix
myplot(Salary)
#in Game Matrix
myplot(MinutesPlayed)
myplot(Points)
#in Game Matrix
myplot(MinutesPlayed)
myplot(Points)
myplot(Salary/FieldGoals)
myplot(Salary/Games)
myplot(Salary)
#In Game Matrix Normalized
myplot(FieldGoals/Games)
myplot(FieldGoals/FieldGoalAttempts)
myplot(FieldGoalAttempts/Games)
myplot(Points/Games)
#interesting Observation
myplot(MinutesPlayed/Games)
myplot(Games)
myplot(Games)
#interesting Observation
myplot(MinutesPlayed/Games)
#Time is Valuable
myplot(FieldGoals/MinutesPlayed)
#Player style
myplot(Points/FieldGoals)
getwd()
setwd("F:/IIT,BSSE/Fifth Semister/Data Science and Anaytics")
getwd()
train <- read.csv("test.csv")
train <- read.csv("train.csv")
View(myplot)
View(myplot)
View(myplot)
getwd()
setwd("F:/IIT,BSSE/Fifth Semister/Data Science and Anaytics")
getwd()
train <- read.csv("test.csv")
train <- read.csv("train.csv")
test <- read.csv("test.csv")
train <- read.csv("train.csv")
View(test)
View(test)
View(train)
View(train)
View(test)
head(test.csv)
head("test.csv")
head(test)
head(test)
head(train)
head(train)
#Talking care of missing value
nlTrainNA = sapply( train, function(x) switch( class(x), factor = sum(x==""), sum( is.na(x) ) ) );
tTrainNA = t(nlTrainNA);                                        # transpose named list
dfTrainNA = data.frame( tTrainNA );
View(tTrainNA)
View(tTrainNA)
View(dfTrainNA)
View(dfTrainNA)
train$Age = ifelse(is.na(train$Age),
ave(train$Age, FUN = function(x) mean(x,na.rm=TRUE)),
train$Age)
View(train)
View(train)
train$Age = ifelse(is.na(train$Age),
ave(train$Age, FUN = function(x) mean(x,na.rm=TRUE)),
train$Age ,0)
# Let's change the empty strings in Embarked to the first choice "C"
train$Embarked = train$Embarked[train$Embarked==""]="C"
train$Age = ifelse(is.na(train$Age),
ave(train$Age, FUN = function(x) mean(x,na.rm=TRUE)),
train$Age)
getwd()
setwd("F:/IIT,BSSE/Fifth Semister/Data Science and Anaytics")
getwd()
test <- read.csv("test.csv")
train <- read.csv("train.csv")
head(test)
head(train)
#Talking care of missing value
nlTrainNA = sapply( train, function(x) switch( class(x), factor = sum(x==""), sum( is.na(x) ) ) );
tTrainNA = t(nlTrainNA);                                        # transpose named list
dfTrainNA = data.frame( tTrainNA );
train$Age = ifelse(is.na(train$Age),
ave(train$Age, FUN = function(x) mean(x,na.rm=TRUE)),
train$Age)
getwd()
View(train)
View(train)
View(dfTrainNA)
View(dfTrainNA)
View(tTrainNA)
View(dfTrainNA)
View(tTrainNA)
#Variale feature
ggplot(train, aes(x = factor(Pclass), fill = factor(Pclass))) +
geom_bar( show.legend=FALSE) +
xlab("Pclass") +
ylab("Total Count")
library(ggplot2)
#Variale feature
ggplot(train, aes(x = factor(Pclass), fill = factor(Pclass))) +
geom_bar( show.legend=FALSE) +
xlab("Pclass") +
ylab("Total Count")
ggplot(train, aes(x = factor(Pclass), fill = factor(Survived))) +
geom_bar(width = 0.5, position="dodge") +
xlab("Pclass") +
ylab("Total Count") +
labs(fill = "Survived")
head(as.character(train$Name),n=20);
ggplot(train, aes(x = factor(Sex), fill = factor(Sex))) +
geom_bar( show.legend=FALSE) +
xlab("Sex") +
ylab("Total Count")
ggplot(train, aes(x = factor(Sex), fill = factor(Sex))) +
geom_bar( show.legend=TRUE) +
xlab("Sex") +
ylab("Total Count")
ggplot(train, aes(x = factor(Sex), fill = factor(Survived))) +
geom_bar(width = 0.5, position="dodge") +
xlab("Sex") +
ylab("Total Count") +
labs(fill = "Survived")
ggplot(subset(train, !is.na(Age)), aes(x = Age)) +
geom_histogram(binwidth=4) +
xlab("Age") +
ylab("Total Count");
ggplot(subset(train,!is.na(Age)), aes(y=Age,x="")) + geom_boxplot();
#Age is a predictor of Survivality
ggplot(subset(train,!is.na(Age)), aes(x = Age, fill = factor(Survived))) +
geom_density( position="stack") +
xlab("Age") +
ylab("Total Count") +
labs(fill = "Survived")
#SibSp
ggplot(train, aes(x = SibSp )) +
geom_histogram(binwidth=0.5) +
xlab("Number of Siblings/Spouses") +
ylab("Total Count")
ggplot(train, aes(x = SibSp, fill = factor(Survived))) +
geom_histogram(binwidth=0.5, position="dodge") +
xlab("Number of Siblings/Spouses") +
ylab("Total Count") +
labs(fill = "Survived")
ggplot(train, aes(x = Parch )) +
geom_histogram(binwidth=0.5) +
xlab("Number of Parents/Children") +
ylab("Total Count")
ggplot(train, aes(x = Parch, fill = factor(Survived))) +
geom_histogram(binwidth=0.5, position="dodge") +
xlab("Number of Parents/Children") +
ylab("Total Count") +
labs(fill = "Survived")
head(as.character(train$Ticket),n=20);
head(as.character(train$Ticket),n=20);
ggplot(train, aes(x = Fare)) +
geom_histogram(binwidth=4) +
xlab("Fare") +
ylab("Total Count");
ggplot(train, aes(y=Fare,x="")) + geom_boxplot();
ggplot(train, aes(x = Fare, fill = factor(Survived))) +
geom_density( position="stack") +
xlab("Fare") +
ylab("Total Count") +
labs(fill = "Survived")
levels(train$Cabin)
levels(train$Cabin)
#cabin
levels(train$Cabin)
cabinLetter = ifelse(train$Cabin == "", NA, substr(train$Cabin,1,1));
cabinREs = gregexpr("\\d+",train$Cabin, perl=TRUE);
cnMatches = regmatches( train$Cabin, cabinREs);
cabinNumber = numeric(length(cnMatches));
for ( i in 1:length(cnMatches) ){
cabinNumber[i] = mean( as.numeric( unlist( cnMatches[i] )));
}
edaTrain$CabinLetter <- as.factor(cabinLetter);
edaTrain$CabinNumber <- cabinNumber;
ggplot( edaTrain, aes(x=CabinNumber,y=Survived,color=Survived ) ) +
geom_point( shape=1,position=position_jitter(height=0.25)) +
ggtitle("Survivability by Cabin Number") +
xlab("Cabin Number") +
ylab("Survived");
ggplot(subset(edaTrain, !is.na(cabinLetter)), aes(x = CabinLetter, fill = as.factor(Survived))) +
geom_bar() +
ggtitle("Survivability by Ticket Letter") +
xlab("Cabin Letter") +
ylab("Total Count") +
labs(fill = "Survived");
#Univariate non-graphical method:
## Categorical Data
##@Survived
titanic_data_survived_table <- as.matrix(summary(titanic_data$Survived))
titanic_data$Survived<-as.factor(titanic_data$Survived)
getwd()
setwd("F:/IIT,BSSE/Fifth Semister/Data Science and Anaytics")
getwd()
test <- read.csv("test.csv")
test <- read.csv("test.csv")
train <- read.csv("train.csv")
test <- read.csv("test.csv")
train <- read.csv("train.csv")
train$Survived<-as.factor(train$Survived)
train$Pclass<-as.factor(train$Pclass)
#Univariate non-graphical method:
## Categorical Data
##@Survived
titanic_data_survived_table <- as.matrix(summary(titanic_data$Survived))
#Univariate non-graphical method:
## Categorical Data
##@Survived
train_survived_table <- as.matrix(summary(train$Survived))
#Univariate non-graphical method:
## Categorical Data
##@Survived
train.survived <- as.matrix(summary(train$Survived))
#Univariate non-graphical method:
## Categorical Data
##@Survived
train.survived <- as.matrix(summary(train$Survived))
View(train_survived_table)
View(train.survived)
train.Pclass<-cbind(train.Pclass,
train.Pclass/sum(train.Pclass))
##@Pclass
train.Pclass<- as.matrix(summary(train$Pclass))
train.Pclass<-cbind(train.Pclass,
train.Pclass/sum(train.Pclass))
View(train.Pclass)
View(train.Pclass)
##@Sex
train.Sex <- as.matrix(summary(train$Sex))
train.Sex<-cbind(train.Sex,
train.Sex/sum(train.Sex))
##@Cabin
train.Cabin <- as.matrix(summary(train$Cabin))
train.Cabin<-cbind(train.Cabin,
train.Cabin/sum(train.Cabin))
##@Ticket
train_Ticket_table <- as.matrix(summary(train$Ticket))
##@Ticket
train.Ticket<- as.matrix(summary(train$Ticket))
train.Ticket<-cbind(train.Ticket,
train.Ticket/sum(train.Ticket))
##Quantitative-data
##@PassengerId
#Central Tendency
##@Age
train_age_central_tendency <-list(mean(train$Age,na.rm = TRUE),median(train$Age,na.rm = TRUE))
getwd()
setwd("F:/IIT,BSSE/Fifth Semister/Data Science and Anaytics")
getwd()
test <- read.csv("test.csv")
train <- read.csv("train.csv")
train$Survived<-as.factor(train$Survived)
train$Pclass<-as.factor(train$Pclass)
#Univariate non-graphical method:
## Categorical Data
##@Survived
train.survived <- as.matrix(summary(train$Survived))
train.survived<-cbind(train.survived,
train.survived/sum(train.survived))
##@Pclass
train.Pclass<- as.matrix(summary(train$Pclass))
train.Pclass<-cbind(train.Pclass,
train.Pclass/sum(train.Pclass))
##@Sex
train.Sex <- as.matrix(summary(train$Sex))
train.Sex<-cbind(train.Sex,
train.Sex/sum(train.Sex))
##@Cabin
train.Cabin <- as.matrix(summary(train$Cabin))
train.Cabin<-cbind(train.Cabin,
train.Cabin/sum(train.Cabin))
##@Ticket
train.Ticket<- as.matrix(summary(train$Ticket))
train.Ticket<-cbind(train.Ticket,
train.Ticket/sum(train.Ticket))
##Quantitative-data
##@PassengerId
#Central Tendency
##@Age
train.ageCT<-list(mean(train$Age,na.rm = TRUE),median(train$Age,na.rm = TRUE))
##@SibSp
train.SibSpCT<-list(mean(train$SibSp,na.rm = TRUE),median(train$SibSp,na.rm = TRUE))
##@Parch
titanihist(na.omit(train$Age),main ='Histogram of Age',xlab = 'Age',ylab = 'Frequency')c_data_Parch_central_tendency <-list(mean(train$Parch,na.rm = TRUE),median(train$Parch,na.rm = TRUE))
#Central Tendency
#Spread
train.age.spreads<-list(var(train$Age,na.rm = TRUE),sqrt(var(train$Age,na.rm = TRUE)),boxplot(train$Age)$stats[4,1]-boxplot(train$Age)$stats[2,1])
train.SibSp.spreads <-list(var(train$SibSp,na.rm = TRUE),sqrt(var(train$SibSp,na.rm = TRUE)),boxplot(train$SibSp)$stats[4,1]-boxplot(train$SibSp)$stats[2,1])
train.Parch.spreads <-list(var(train$Parch,na.rm = TRUE),sqrt(var(train$Parch,na.rm = TRUE)),boxplot(train$Parch)$stats[4,1]-boxplot(train$Parch)$stats[2,1])
train.Fare.spreads <-list(var(train$Fare,na.rm = TRUE),sqrt(var(train$Fare,na.rm = TRUE)),boxplot(train$Fare)$stats[4,1]-boxplot(train$Fare)$stats[2,1])
#Spread
#Univariate graphical method
##Categorical Data
barplot(train.survived,beside = TRUE,names.arg =levels(train$Survived), xlab = 'Sex',ylab = '#Person')
barplot(train.Pclass,beside = TRUE,names.arg =levels(train$Pclass), xlab = 'Class',ylab = '#Person')
#Quantitative Data
#Histogram
#Age
hist(na.omit(train$Age),main ='Histogram of Age',xlab = 'Age',ylab = 'Frequency')
#SibS
hist(na.omit(train$SibSp),main ='Histogram of SibSp',xlab = 'SibSp',ylab = 'Frequency')
#Parch
hist(na.omit(train$Parch),main ='Histogram of Parch',xlab = 'Parch',ylab = 'Frequency')
##Fare
hist(na.omit(train$Fare),main ='Histogram of Fare',xlab = 'Fare',ylab = 'Frequency')
#Histogram
#Boxplot
##@Age
boxplot(na.omit(train$Age))
##@SibSp
boxplot(na.omit(train$SibSp))
##@Parch
boxplot(na.omit(train$Parch))
##@Fare
boxplot(na.omit(train$Fare))
#Boxplot
#Boxplot
##@Fare
boxplot(na.omit(train$Fare))
#Histogram
#Boxplot
##@Age
boxplot(na.omit(train$Age))
##@SibSp
boxplot(na.omit(train$SibSp))
##@Parch
boxplot(na.omit(train$Parch))
##@Fare
boxplot(na.omit(train$Fare))
##Fare
hist(na.omit(train$Fare),main ='Histogram of Fare',xlab = 'Fare',ylab = 'Frequency')
#Parch
hist(na.omit(train$Age),main ='Histogram of Age',xlab = 'Age',ylab = 'Frequency')c_data_Parch_central_tendency <-list(mean(train$Parch,na.rm = TRUE),median(train$Parch,na.rm = TRUE))
#Parch
trainhist(na.omit(train$Age),main ='Histogram of Age',xlab = 'Age',ylab = 'Frequency')c_data_ParchCT <-list(mean(train$Parch,na.rm = TRUE),median(train$Parch,na.rm = TRUE))
#Parch
train.Parch(na.omit(train$Age),main ='Histogram of Age',xlab = 'Age',ylab = 'Frequency')c_data_ParchCT <-list(mean(train$Parch,na.rm = TRUE),median(train$Parch,na.rm = TRUE))
#Fare
train.FareCT<-list(mean(train$Fare,na.rm = TRUE),median(train$Fare,na.rm = TRUE))
#Central Tendency
#Spread
train.age.spreads<-list(var(train$Age,na.rm = TRUE),sqrt(var(train$Age,na.rm = TRUE)),boxplot(train$Age)$stats[4,1]-boxplot(train$Age)$stats[2,1])
train.SibSp.spreads <-list(var(train$SibSp,na.rm = TRUE),sqrt(var(train$SibSp,na.rm = TRUE)),boxplot(train$SibSp)$stats[4,1]-boxplot(train$SibSp)$stats[2,1])
train.Parch.spreads <-list(var(train$Parch,na.rm = TRUE),sqrt(var(train$Parch,na.rm = TRUE)),boxplot(train$Parch)$stats[4,1]-boxplot(train$Parch)$stats[2,1])
train.Fare.spreads <-list(var(train$Fare,na.rm = TRUE),sqrt(var(train$Fare,na.rm = TRUE)),boxplot(train$Fare)$stats[4,1]-boxplot(train$Fare)$stats[2,1])
#Spread
#Univariate graphical method
##Categorical Data
barplot(train.survived,beside = TRUE,names.arg =levels(train$Survived), xlab = 'Sex',ylab = '#Person')
barplot(train.Pclass,beside = TRUE,names.arg =levels(train$Pclass), xlab = 'Class',ylab = '#Person')
#Quantitative Data
#Histogram
#Age
hist(na.omit(train$Age),main ='Histogram of Age',xlab = 'Age',ylab = 'Frequency')
#SibS
hist(na.omit(train$SibSp),main ='Histogram of SibSp',xlab = 'SibSp',ylab = 'Frequency')
barplot(train.Pclass,beside = TRUE,names.arg =levels(train$Pclass), xlab = 'Class',ylab = '#Person')
#Spread
#Univariate graphical method
##Categorical Data
barplot(train.survived,beside = TRUE,names.arg =levels(train$Survived), xlab = 'Sex',ylab = '#Person')
barplot(train.Pclass,beside = TRUE,names.arg =levels(train$Pclass), xlab = 'PClass',ylab = '#Person')
